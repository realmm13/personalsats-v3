generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?            @updatedAt
  name                String
  email               String               @unique
  emailVerified       Boolean
  image               String?
  bio                 String?
  avatarImageUrl      String?
  coverImageUrl       String?
  avatarImageUTKey    String?
  coverImageUTKey     String?
  avatarImageId       String?              @unique
  coverImageId        String?              @unique
  timezone            String?              @default("Etc/GMT")
  preferences         Json?                @default("{}")
  role                String               @default("user")
  banReason           String?
  banExpires          DateTime?
  banned              Boolean              @default(false)
  username            String?              @unique
  displayUsername     String?
  onboarded           Boolean              @default(false)
  accountingMethod    String               @default("HIFO")
  bitcoinTransactions BitcoinTransaction[]
  dailySnapshots      DailySnapshot[]
  accounts            Account[]
  sessions            Session[]
  avatarImage         UTImage?             @relation("AvatarImage", fields: [avatarImageId], references: [id])
  coverImage          UTImage?             @relation("CoverImage", fields: [coverImageId], references: [id])
  uploadedImages      UTImage[]            @relation("UploadedImages")

  @@map("users")
}

model Session {
  id             String    @id
  expiresAt      DateTime
  token          String    @unique
  createdAt      DateTime
  updatedAt      DateTime? @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User      @relation(fields: [userId], references: [id])

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime? @updatedAt
  type                  String?
  user                  User      @relation(fields: [userId], references: [id])

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime? @updatedAt

  @@map("verifications")
}

model UTImage {
  id                 String   @id @default(cuid())
  key                String   @unique
  userId             String
  createdAt          DateTime @default(now())
  usedAsAvatarByUser User?    @relation("AvatarImage")
  usedAsCoverByUser  User?    @relation("CoverImage")
  user               User     @relation("UploadedImages", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ut_images")
}

model BitcoinTransaction {
  id            String       @id @default(cuid())
  type          String?
  amount        Float?
  price         Float?
  timestamp     DateTime
  notes         String?
  userId        String
  fee           Float?
  tags          String[]
  wallet        String?
  createdAt     DateTime     @default(now())
  encryptedData String?
  updatedAt     DateTime     @updatedAt
  asset         String       @default("BTC")
  counterparty  String?
  exchangeTxId  String?
  feeAsset      String?
  priceAsset    String?      @default("USD")
  allocations   Allocation[] @relation("TxAllocations")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  lots          Lot[]        @relation("TxLots")

  @@index([userId, timestamp])
}

model PriceHistory {
  timestamp DateTime @id
  priceUsd  Float

  @@map("price_history")
}

model Lot {
  id             String             @id @default(cuid())
  txId           String
  remainingQty   Float
  closedAt       DateTime?
  costBasisUsd   Float
  gainUsd        Float?
  openedAt       DateTime
  originalAmount Float
  proceedsUsd    Float?
  term           String?
  allocations    Allocation[]       @relation("LotAllocations")
  transaction    BitcoinTransaction @relation("TxLots", fields: [txId], references: [id])

  @@index([txId])
}

model Allocation {
  id          String             @id @default(cuid())
  lotId       String
  txId        String
  qty         Float
  costUsd     Float
  proceedsUsd Float?
  gainUsd     Float?
  createdAt   DateTime           @default(now())
  lot         Lot                @relation("LotAllocations", fields: [lotId], references: [id])
  transaction BitcoinTransaction @relation("TxAllocations", fields: [txId], references: [id])
}

model DailySnapshot {
  date       DateTime
  totalValue Float
  totalCost  Float
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, date])
}


